// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repositories/payroll/contract.go

// Package payroll is a generated GoMock package.
package payroll

import (
	context "context"
	presentations "payslips/internal/presentations"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPayroll is a mock of Payroll interface.
type MockPayroll struct {
	ctrl     *gomock.Controller
	recorder *MockPayrollMockRecorder
}

// MockPayrollMockRecorder is the mock recorder for MockPayroll.
type MockPayrollMockRecorder struct {
	mock *MockPayroll
}

// NewMockPayroll creates a new mock instance.
func NewMockPayroll(ctrl *gomock.Controller) *MockPayroll {
	mock := &MockPayroll{ctrl: ctrl}
	mock.recorder = &MockPayrollMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayroll) EXPECT() *MockPayrollMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPayroll) Create(ctx context.Context, input presentations.Payroll) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPayrollMockRecorder) Create(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPayroll)(nil).Create), ctx, input)
}

// Detail mocks base method.
func (m *MockPayroll) Detail(ctx context.Context, id string) (*presentations.Payroll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Detail", ctx, id)
	ret0, _ := ret[0].(*presentations.Payroll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Detail indicates an expected call of Detail.
func (mr *MockPayrollMockRecorder) Detail(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detail", reflect.TypeOf((*MockPayroll)(nil).Detail), ctx, id)
}

// Update mocks base method.
func (m *MockPayroll) Update(ctx context.Context, payload presentations.Payroll) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPayrollMockRecorder) Update(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPayroll)(nil).Update), ctx, payload)
}
