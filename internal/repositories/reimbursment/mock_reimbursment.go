// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repositories/reimbursment/contract.go

// Package reimbursment is a generated GoMock package.
package reimbursment

import (
	context "context"
	presentations "payslips/internal/presentations"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockReimbursment is a mock of Reimbursment interface.
type MockReimbursment struct {
	ctrl     *gomock.Controller
	recorder *MockReimbursmentMockRecorder
}

// MockReimbursmentMockRecorder is the mock recorder for MockReimbursment.
type MockReimbursmentMockRecorder struct {
	mock *MockReimbursment
}

// NewMockReimbursment creates a new mock instance.
func NewMockReimbursment(ctrl *gomock.Controller) *MockReimbursment {
	mock := &MockReimbursment{ctrl: ctrl}
	mock.recorder = &MockReimbursmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReimbursment) EXPECT() *MockReimbursmentMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockReimbursment) Create(ctx context.Context, input presentations.Reimbursement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockReimbursmentMockRecorder) Create(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReimbursment)(nil).Create), ctx, input)
}

// Detail mocks base method.
func (m *MockReimbursment) Detail(ctx context.Context, id string) (*presentations.Reimbursement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Detail", ctx, id)
	ret0, _ := ret[0].(*presentations.Reimbursement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Detail indicates an expected call of Detail.
func (mr *MockReimbursmentMockRecorder) Detail(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detail", reflect.TypeOf((*MockReimbursment)(nil).Detail), ctx, id)
}

// FindByPayrollID mocks base method.
func (m *MockReimbursment) FindByPayrollID(ctx context.Context, userID, payrollID string) ([]presentations.Reimbursement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPayrollID", ctx, userID, payrollID)
	ret0, _ := ret[0].([]presentations.Reimbursement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPayrollID indicates an expected call of FindByPayrollID.
func (mr *MockReimbursmentMockRecorder) FindByPayrollID(ctx, userID, payrollID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPayrollID", reflect.TypeOf((*MockReimbursment)(nil).FindByPayrollID), ctx, userID, payrollID)
}

// Update mocks base method.
func (m *MockReimbursment) Update(ctx context.Context, payload presentations.Reimbursement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockReimbursmentMockRecorder) Update(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockReimbursment)(nil).Update), ctx, payload)
}

// UpdatePayrollID mocks base method.
func (m *MockReimbursment) UpdatePayrollID(ctx context.Context, payrollID, updatedBy string, start, end time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePayrollID", ctx, payrollID, updatedBy, start, end)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePayrollID indicates an expected call of UpdatePayrollID.
func (mr *MockReimbursmentMockRecorder) UpdatePayrollID(ctx, payrollID, updatedBy, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePayrollID", reflect.TypeOf((*MockReimbursment)(nil).UpdatePayrollID), ctx, payrollID, updatedBy, start, end)
}
