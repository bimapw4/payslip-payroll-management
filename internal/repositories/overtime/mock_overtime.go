// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repositories/overtime/contract.go

// Package overtime is a generated GoMock package.
package overtime

import (
	context "context"
	presentations "payslips/internal/presentations"
	meta "payslips/pkg/meta"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockOvertime is a mock of Overtime interface.
type MockOvertime struct {
	ctrl     *gomock.Controller
	recorder *MockOvertimeMockRecorder
}

// MockOvertimeMockRecorder is the mock recorder for MockOvertime.
type MockOvertimeMockRecorder struct {
	mock *MockOvertime
}

// NewMockOvertime creates a new mock instance.
func NewMockOvertime(ctrl *gomock.Controller) *MockOvertime {
	mock := &MockOvertime{ctrl: ctrl}
	mock.recorder = &MockOvertimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOvertime) EXPECT() *MockOvertimeMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOvertime) Create(ctx context.Context, input presentations.Overtime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOvertimeMockRecorder) Create(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOvertime)(nil).Create), ctx, input)
}

// Detail mocks base method.
func (m *MockOvertime) Detail(ctx context.Context, id string) (*presentations.Overtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Detail", ctx, id)
	ret0, _ := ret[0].(*presentations.Overtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Detail indicates an expected call of Detail.
func (mr *MockOvertimeMockRecorder) Detail(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detail", reflect.TypeOf((*MockOvertime)(nil).Detail), ctx, id)
}

// FindByPayrollID mocks base method.
func (m *MockOvertime) FindByPayrollID(ctx context.Context, userID, payrollID string) ([]presentations.Overtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPayrollID", ctx, userID, payrollID)
	ret0, _ := ret[0].([]presentations.Overtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPayrollID indicates an expected call of FindByPayrollID.
func (mr *MockOvertimeMockRecorder) FindByPayrollID(ctx, userID, payrollID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPayrollID", reflect.TypeOf((*MockOvertime)(nil).FindByPayrollID), ctx, userID, payrollID)
}

// GetOvertimeByDate mocks base method.
func (m *MockOvertime) GetOvertimeByDate(ctx context.Context, user_id string, date time.Time) (*presentations.Attendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOvertimeByDate", ctx, user_id, date)
	ret0, _ := ret[0].(*presentations.Attendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOvertimeByDate indicates an expected call of GetOvertimeByDate.
func (mr *MockOvertimeMockRecorder) GetOvertimeByDate(ctx, user_id, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOvertimeByDate", reflect.TypeOf((*MockOvertime)(nil).GetOvertimeByDate), ctx, user_id, date)
}

// List mocks base method.
func (m_2 *MockOvertime) List(ctx context.Context, m *meta.Params, userID string) ([]presentations.Overtime, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "List", ctx, m, userID)
	ret0, _ := ret[0].([]presentations.Overtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockOvertimeMockRecorder) List(ctx, m, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOvertime)(nil).List), ctx, m, userID)
}

// Update mocks base method.
func (m *MockOvertime) Update(ctx context.Context, payload presentations.Overtime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOvertimeMockRecorder) Update(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOvertime)(nil).Update), ctx, payload)
}

// UpdatePayrollID mocks base method.
func (m *MockOvertime) UpdatePayrollID(ctx context.Context, payrollID, updatedBy string, start, end time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePayrollID", ctx, payrollID, updatedBy, start, end)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePayrollID indicates an expected call of UpdatePayrollID.
func (mr *MockOvertimeMockRecorder) UpdatePayrollID(ctx, payrollID, updatedBy, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePayrollID", reflect.TypeOf((*MockOvertime)(nil).UpdatePayrollID), ctx, payrollID, updatedBy, start, end)
}
