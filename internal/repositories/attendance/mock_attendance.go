// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repositories/attendance/contract.go

// Package attendance is a generated GoMock package.
package attendance

import (
	context "context"
	presentations "payslips/internal/presentations"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockAttendance is a mock of Attendance interface.
type MockAttendance struct {
	ctrl     *gomock.Controller
	recorder *MockAttendanceMockRecorder
}

// MockAttendanceMockRecorder is the mock recorder for MockAttendance.
type MockAttendanceMockRecorder struct {
	mock *MockAttendance
}

// NewMockAttendance creates a new mock instance.
func NewMockAttendance(ctrl *gomock.Controller) *MockAttendance {
	mock := &MockAttendance{ctrl: ctrl}
	mock.recorder = &MockAttendanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttendance) EXPECT() *MockAttendanceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAttendance) Create(ctx context.Context, input presentations.Attendance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAttendanceMockRecorder) Create(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAttendance)(nil).Create), ctx, input)
}

// Detail mocks base method.
func (m *MockAttendance) Detail(ctx context.Context, id string) (*presentations.Attendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Detail", ctx, id)
	ret0, _ := ret[0].(*presentations.Attendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Detail indicates an expected call of Detail.
func (mr *MockAttendanceMockRecorder) Detail(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detail", reflect.TypeOf((*MockAttendance)(nil).Detail), ctx, id)
}

// FindByPayrollID mocks base method.
func (m *MockAttendance) FindByPayrollID(ctx context.Context, userID, payrollID string) ([]presentations.Attendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPayrollID", ctx, userID, payrollID)
	ret0, _ := ret[0].([]presentations.Attendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPayrollID indicates an expected call of FindByPayrollID.
func (mr *MockAttendanceMockRecorder) FindByPayrollID(ctx, userID, payrollID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPayrollID", reflect.TypeOf((*MockAttendance)(nil).FindByPayrollID), ctx, userID, payrollID)
}

// GetCheckinByDate mocks base method.
func (m *MockAttendance) GetCheckinByDate(ctx context.Context, user_id string, date time.Time) (*presentations.Attendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCheckinByDate", ctx, user_id, date)
	ret0, _ := ret[0].(*presentations.Attendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCheckinByDate indicates an expected call of GetCheckinByDate.
func (mr *MockAttendanceMockRecorder) GetCheckinByDate(ctx, user_id, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCheckinByDate", reflect.TypeOf((*MockAttendance)(nil).GetCheckinByDate), ctx, user_id, date)
}

// Update mocks base method.
func (m *MockAttendance) Update(ctx context.Context, payload presentations.Attendance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAttendanceMockRecorder) Update(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAttendance)(nil).Update), ctx, payload)
}

// UpdatePayrollID mocks base method.
func (m *MockAttendance) UpdatePayrollID(ctx context.Context, payrollID, updatedBy string, start, end time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePayrollID", ctx, payrollID, updatedBy, start, end)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePayrollID indicates an expected call of UpdatePayrollID.
func (mr *MockAttendanceMockRecorder) UpdatePayrollID(ctx, payrollID, updatedBy, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePayrollID", reflect.TypeOf((*MockAttendance)(nil).UpdatePayrollID), ctx, payrollID, updatedBy, start, end)
}
